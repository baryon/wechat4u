{"version":3,"sources":["../src/wechat.js"],"names":["debug","process","on","console","log","err","Wechat","extend","state","CONF","STATE","init","contacts","Contact","Message","lastReportTime","syncErrorCount","callback","syncCheck","then","selector","SYNCCHECK_SELECTOR_NORMAL","sync","data","syncPolling","Date","notifyMobile","user","UserName","statReport","sendText","toLocaleString","catch","emit","logout","setTimeout","ret","undefined","getUUID","uuid","checkLogin","code","userAvatar","login","getContact","length","updateContacts","handleSync","AddMsgCount","handleMsg","AddMsgList","ModContactCount","ModContactList","forEach","Promise","resolve","msg","FromUserName","batchGetContact","MsgType","MSGTYPE_STATUSNOTIFY","userList","StatusNotifyUserName","split","map","all","chunk","list","res","contact","original","val","key","indexOf","MemberList","Uin","members","member","push","username","nickname","getDisplayName","py","avatar","AvatarUrl","exports","module"],"mappings":"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","file":"wechat.js","sourcesContent":["import WechatCore from './core'\nimport EventEmitter from 'events'\n\nimport _ from 'lodash'\nimport {\n  getCONF,\n  isStandardBrowserEnv\n} from './util'\n\nimport ContactFactory from './interface/contact'\nimport MessageFactory from './interface/message'\n\nimport _debug from 'debug'\nconst debug = _debug('wechat')\n\nif (!isStandardBrowserEnv) {\n  process.on('uncaughtException', err => {\n    console.log('uncaughtException', err)\n  })\n}\n\nclass Wechat extends WechatCore {\n\n  constructor() {\n    super()\n    _.extend(this, new EventEmitter())\n    this.state = this.CONF.STATE.init\n    this.contacts = {} // 所有联系人\n    this.Contact = ContactFactory(this)\n    this.Message = MessageFactory(this)\n    this.lastReportTime = 0\n    this.syncErrorCount = 0\n  }\n\n  get friendList() {\n    let members = []\n\n    for (let key in this.contacts) {\n      let member = this.contacts[key]\n      members.push({\n        username: member['UserName'],\n        nickname: this.Contact.getDisplayName(member),\n        py: member['RemarkPYQuanPin'] ? member['RemarkPYQuanPin'] : member['PYQuanPin'],\n        avatar: member.AvatarUrl\n      })\n    }\n\n    return members\n  }\n\n  syncPolling(callback) {\n    this.syncCheck().then(selector => {\n      debug('Sync Check Selector: ', selector)\n      if (selector != this.CONF.SYNCCHECK_SELECTOR_NORMAL) {\n        return this.sync().then(data => {\n          this.syncErrorCount = 0\n          callback(data)\n        })\n      }\n    }).then(() => {\n      this.syncPolling(callback)\n      if (+new Date() - this.lastReportTime > 5 * 60 * 1000) {\n        debug('Status Report')\n        this.notifyMobile(this.user.UserName)\n        this.statReport()\n        this.sendText('心跳：' + new Date().toLocaleString(), 'filehelper')\n        this.lastReportTime = +new Date()\n      }\n    }).catch(err => {\n      this.emit('error', err)\n      if (this.syncErrorCount++ > 5) {\n        debug(err)\n        this.logout()\n        callback()\n      } else {\n        setTimeout(() => {\n          this.syncPolling(callback)\n        }, 1000 * this.syncErrorCount)\n      }\n    })\n  }\n\n  async start() {\n    let ret = undefined\n    try {\n      ret = await this.getUUID()\n      debug('getUUID: ', ret)\n      this.emit('uuid', ret)\n      this.state = this.CONF.STATE.uuid\n      do {\n        ret = await this.checkLogin()\n        debug('checkLogin: ', ret)\n        if (ret.code == 201 && ret.userAvatar) {\n          this.emit('user-avatar', ret.userAvatar)\n        }\n      } while (ret.code !== 200)\n      await this.login()\n      await this.init()\n      await this.notifyMobile()\n      ret = await this.getContact()\n      debug('getContact data length: ', ret.length)\n      this.updateContacts(ret)\n    } catch (err) {\n      this.emit('error', err)\n      debug(err)\n      this.logout()\n      this.emit('logout')\n      this.state = this.CONF.STATE.logout\n      return\n    }\n    this.syncPolling(data => this.handleSync(data))\n    this.emit('login')\n    this.state = this.CONF.STATE.login\n  }\n\n  stop() {\n    this.logout()\n  }\n\n  handleSync(data) {\n    if (!data) {\n      this.emit('logout')\n      this.state = this.CONF.STATE.logout\n      return\n    }\n    if (data.AddMsgCount) {\n      debug('syncPolling messages count: ', data.AddMsgCount)\n      this.handleMsg(data.AddMsgList)\n    }\n    if (data.ModContactCount) {\n      debug('syncPolling ModContactList count: ', data.ModContactCount)\n      this.updateContacts(data.ModContactList)\n    }\n  }\n\n  handleMsg(data) {\n    data.forEach(msg => {\n      Promise.resolve().then(() => {\n        if (!this.contacts[msg.FromUserName]) {\n          return this.batchGetContact([{\n            UserName: msg.FromUserName\n          }]).catch(err => {\n            debug(err)\n            return [{\n              UserName: msg.FromUserName\n            }]\n          }).then(contacts => {\n            this.updateContacts(contacts)\n          })\n        }\n      }).then(() => {\n        msg = this.Message.extend(msg)\n        this.emit('message', msg)\n        if (msg.MsgType == this.CONF.MSGTYPE_STATUSNOTIFY) {\n          let userList = msg.StatusNotifyUserName.split(',').map(UserName => {\n            return {\n              UserName: UserName\n            }\n          })\n          Promise.all(_.chunk(userList, 50).map(list => {\n            return this.batchGetContact(list).then(res => {\n              debug('batchGetContact data length: ', res.length)\n              this.updateContacts(res)\n            })\n          })).catch(err => {\n            debug(err)\n          })\n        }\n      }).catch(err => {\n        this.emit('error', err)\n        debug(err)\n      })\n    })\n  }\n\n  updateContacts(contacts) {\n    contacts.forEach(contact => {\n      if (this.contacts[contact.UserName]) {\n        let original = this.contacts[contact.UserName]\n        _.forEach(contact, (val, key) => {\n          if (!original[key]) {\n            original[key] = val\n          }\n        })\n        if (contact.UserName.indexOf('@@') == 0 && contact.MemberList[0].Uin != 0) {\n          original.MemberList = contact.MemberList\n        }\n      } else {\n        this.contacts[contact.UserName] = this.Contact.extend(contact)\n      }\n    })\n    this.emit('contacts-updated', contacts)\n  }\n}\n\nWechat.STATE = getCONF().STATE\n\nexports = module.exports = Wechat\n"]}